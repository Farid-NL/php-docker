#!/usr/bin/env bash

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    n_colors=$(tput colors)

    if test -n "$n_colors" && test "$n_colors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "${BOLD}PHP DEV${NC}"
    echo
    echo "${YELLOW}Usage:${NC}"
    echo "  ./dev COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}dev up${NC}        Start the application"
    echo "  ${GREEN}dev up -d${NC}     Start the application in the background"
    echo "  ${GREEN}dev stop${NC}      Stop the application"
    echo "  ${GREEN}dev restart${NC}   Restart the application"
    echo "  ${GREEN}dev ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}dev php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}dev php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}dev composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}dev composer require laravel/sanctum${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}dev node ...${NC}         Run a Node command"
    echo "  ${GREEN}dev node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}dev npm ...${NC}        Run a npm command"
    echo "  ${GREEN}dev npx${NC}            Run a npx command"
    echo "  ${GREEN}dev npm run prod${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}dev mysql${NC}     Start a MySQL CLI session within the 'mysql' container"
    echo "  ${GREEN}dev mariadb${NC}   Start a MySQL CLI session within the 'mariadb' container"
    echo "  ${GREEN}dev psql${NC}      Start a PostgreSQL CLI session within the 'pgsql' container"
    echo "  ${GREEN}dev redis${NC}     Start a Redis CLI session within the 'redis' container"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}dev shell${NC}        Start a shell session within the application container"
    echo "  ${GREEN}dev bash${NC}         Alias for 'dev shell'"
    echo "  ${GREEN}dev root-shell${NC}   Start a root shell session within the application container"
    echo "  ${GREEN}dev root-bash${NC}    Alias for 'dev root-shell'"
    echo
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}dev bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"
    echo
    echo "${YELLOW}Customization:${NC}"
    echo "  ${GREEN}dev build --no-cache${NC}       Rebuild all containers"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so environment variables are available
if [ -f ./.env ]; then
  source ./.env;
fi


#export APP_USER=${WWWUSER:-$UID}
#export APP_GROUP=${WWWGROUP:-$(id -g)}
export APP_SERVICE=${APP_SERVICE:-"php.app"}

# Define Docker Compose command prefix...
if docker compose &> /dev/null; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

# Ensure that Docker is running...
if ! docker info > /dev/null 2>&1; then
    echo "${BOLD}Docker is not running.${NC}" >&2

    exit 1
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "php" "$@")

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" ./vendor/bin/"$@")

# Proxy docker-compose commands to the docker-compose binary on the application container...
elif [ "$1" == "docker-compose" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "${DOCKER_COMPOSE[@]}")

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "composer" "$@")

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" node "$@")

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    ARGS+=(exec -u dev)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" npm "$@")

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    ARGS+=(exec)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(mysql bash -c)
    ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}")

# Initiate a MySQL CLI terminal session within the "mariadb" container...
elif [ "$1" == "mariadb" ]; then
    shift 1

    ARGS+=(exec)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(mariadb bash -c)
    ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}")

# Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
elif [ "$1" == "psql" ]; then
    shift 1

    ARGS+=(exec)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(pgsql bash -c)
    ARGS+=("PGPASSWORD=\${PGPASSWORD} psql -U \${POSTGRES_USER} \${POSTGRES_DB}")

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    ARGS+=(exec -u sail)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" bash "$@")

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
    shift 1

    ARGS+=(exec -u root)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" bash "$@")

# Pass unknown commands to the "docker-compose" binary...
else
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"
